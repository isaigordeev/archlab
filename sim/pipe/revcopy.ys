#/* $begin revcopy-ys */
##################################################################
# revcopy.ys - Copy a src block of len words to dst in reverse order.
# Return the number of positive words (>0) contained in src.
#
# Modified from ncopy:
# 1. dst pointer decrements (reverse order).
# 2. unrolled loop writes words in reverse order.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
        rrmovq %rdx, %rcx
        iaddq $-8, %rcx 
	jle Next2
Loop1:        
        # Load 8 words from src
        mrmovq   (%rdi), %r8
        mrmovq  8(%rdi), %r9
        mrmovq 16(%rdi), %r10
        mrmovq 24(%rdi), %r11
        mrmovq 32(%rdi), %r12
        mrmovq 40(%rdi), %r13
        mrmovq 48(%rdi), %r14
        mrmovq 56(%rdi), %rbx

        # Store to dst in reverse order
        rmmovq %r8,  -56(%rsi)
        rmmovq %r9,  -48(%rsi)
        rmmovq %r10, -40(%rsi)
        rmmovq %r11, -32(%rsi)
        rmmovq %r12, -24(%rsi)
        rmmovq %r13, -16(%rsi)
        rmmovq %r14,  -8(%rsi)
        rmmovq %rbx,   (%rsi)

ele1:   andq %r8, %r8           
        jle ele2
        iaddq $1, %rax          
ele2:   andq %r9, %r9          
        jle ele3
        iaddq $1, %rax
ele3:   andq %r10, %r10
        jle ele4
        iaddq $1, %rax
ele4:   andq %r11, %r11
        jle ele5
        iaddq $1, %rax
ele5:   andq %r12, %r12
        jle ele6
        iaddq $1, %rax
ele6:   andq %r13, %r13
        jle ele7
        iaddq $1, %rax
ele7:   andq %r14, %r14
        jle ele8
        iaddq $1, %rax
ele8:   andq %rbx, %rbx
        jle Npos1
        iaddq $1, %rax

Npos1:  iaddq $64, %rdi         # src += 8
        iaddq $-64, %rsi        # dst -= 8
        iaddq $-8, %rdx         # len -= 8
        iaddq $-8, %rcx         
        jg Loop1                

Next2:  andq %rdx,%rdx          
        jle Done                

Loop3:	mrmovq (%rdi), %rbx	
	rmmovq %rbx, (%rsi)	
	andq %rbx, %rbx		
	jle Npos3		
	iaddq $1, %rax		
Npos3:	iaddq $8, %rdi		# src++
	iaddq $-8, %rsi		# dst--
	iaddq $-1, %rdx         
        jg Loop3		

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end revcopy-ys */
